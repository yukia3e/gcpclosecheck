name: CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION_MATRIX: "1.21, 1.22, 1.23, 1.24, 1.25"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.21", "1.22", "1.23", "1.24", "1.25"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Build binary
      run: go build -v -o gcpclosecheck${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/gcpclosecheck
      
    - name: Test binary execution
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./gcpclosecheck.exe -V
        else
          ./gcpclosecheck -V
        fi

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^Benchmark ./...
      
    - name: Save benchmark results
      run: go test -bench=. -benchmem -run=^Benchmark ./... > benchmark.txt
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Run integration tests
      run: go test -v -tags=integration ./cmd/gcpclosecheck/...
      
    - name: Test CLI integration
      run: |
        go build -o gcpclosecheck ./cmd/gcpclosecheck
        echo 'package main; import "context"; func main() { ctx, cancel := context.WithCancel(context.Background()); _ = ctx; _ = cancel }' > test.go
        ./gcpclosecheck test.go || true  # Expected to find issues
        rm test.go

  e2e:
    name: E2E Tests  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Run E2E tests
      run: |
        cd internal/analyzer
        go test -v -run "TestE2E" ./...
        
    - name: Verify testdata integrity
      run: |
        find internal/analyzer/testdata -name "*.go" | xargs -I {} go fmt {}
        if [ -n "$(git status --porcelain)" ]; then
          echo "Testdata files are not properly formatted"
          git status
          exit 1
        fi