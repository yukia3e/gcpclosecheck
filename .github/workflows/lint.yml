name: Code Quality

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  golangci:
    name: GolangCI-Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: false
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m --config=.golangci.yml
        
    - name: Upload golangci-lint report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: golangci-lint-report
        path: golangci-lint-report.xml

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Check gofmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files are not formatted:"
          gofmt -l .
          echo "Please run 'go fmt ./...' to format your code."
          exit 1
        fi
        
    - name: Check goimports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ -n "$(goimports -l .)" ]; then
          echo "The following files have incorrect imports:"
          goimports -l .
          echo "Please run 'goimports -w .' to fix your imports."
          exit 1
        fi

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go vet with analysis
      run: go vet -vettool=$(which vet) ./...

  staticcheck:
    name: Staticcheck
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
      
    - name: Run staticcheck
      run: staticcheck ./...

  additional-checks:
    name: Additional Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Install quality tools
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        go install github.com/client9/misspell/cmd/misspell@latest
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install github.com/mdempsky/unconvert@latest
        
    - name: Run ineffassign
      run: ineffassign ./...
      
    - name: Run misspell
      run: misspell -error .
      
    - name: Check cyclomatic complexity
      run: gocyclo -over 15 .
      
    - name: Run unconvert
      run: unconvert -v ./...
      
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" --include="*.go" . ; then
          echo "Found TODO/FIXME comments. Please address them before merging."
          exit 1
        fi

  mod:
    name: Go Mod
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Check go mod tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "go.mod or go.sum is not up to date:"
          git diff go.mod go.sum
          echo "Please run 'go mod tidy' and commit the changes."
          exit 1
        fi
        
    - name: Verify dependencies
      run: go mod verify
      
    - name: Check for unused dependencies
      run: |
        go install github.com/dominikh/go-tools/cmd/staticcheck@latest
        go mod download
        go list -json -m all | jq -r 'select(.Indirect != true) | .Path' | grep -v "^$(go list -m)$" | xargs -I {} sh -c 'grep -r --include="*.go" {} . || echo "Unused dependency: {}"'

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Check package documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        missing_docs=$(go doc -all ./... 2>&1 | grep -c "no documentation" || true)
        if [ "$missing_docs" -gt 5 ]; then
          echo "Too many packages/functions without documentation: $missing_docs"
          go doc -all ./... 2>&1 | grep "no documentation" || true
          exit 1
        fi
        
    - name: Generate documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        godoc -http=:6060 &
        sleep 3
        curl -s http://localhost:6060/pkg/github.com/yukia3e/gcpclosecheck/ > /dev/null