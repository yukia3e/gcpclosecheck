name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run govulncheck
      run: govulncheck ./...
      
    - name: Run govulncheck on modules
      run: govulncheck -mode=module ./...

  gosec:
    name: Security Audit with Gosec
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        fail-on-scopes: development,runtime
        comment-summary-in-pr: true

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Build project
      run: go build -v ./...
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest
      
    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        go-licenses check ./...
        
    - name: Generate license report
      run: |
        echo "Generating license report..."
        go-licenses report ./... > licenses.txt
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.txt

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.25"
        cache: true
        
    - name: Check module authenticity
      run: |
        echo "Verifying go.sum authenticity..."
        go mod verify
        
    - name: Check for known malicious packages
      run: |
        echo "Scanning for known malicious packages..."
        go list -m all | while read -r module version; do
          if [ "$module" != "$(go list -m)" ]; then
            echo "Checking $module@$version"
            # Add checks for known malicious packages here
            # This is a placeholder for future implementation
          fi
        done
        
    - name: Audit dependencies
      run: |
        echo "Auditing dependencies..."
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth --loud
        
    - name: Check for archived/deprecated modules
      run: |
        echo "Checking for archived/deprecated modules..."
        go list -m all | grep -E "(archived|deprecated)" || echo "No archived/deprecated modules found"

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-report:
    name: Security Report
    needs: [govulncheck, gosec, codeql, license-check, supply-chain, secrets-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- govulncheck: ${{ needs.govulncheck.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- gosec: ${{ needs.gosec.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- codeql: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- license-check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- supply-chain: ${{ needs.supply-chain.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- secrets-scan: ${{ needs.secrets-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed security checks above" >> $GITHUB_STEP_SUMMARY
        echo "- Check the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
        echo "- Update dependencies if vulnerabilities are found" >> $GITHUB_STEP_SUMMARY
        
    - name: Post comment on PR
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸ”’ Security scans detected issues. Please check the workflow logs and resolve any security vulnerabilities before merging.'
          })